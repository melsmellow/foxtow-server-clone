const Towmast = require("../models/Towmast");

module.exports.createData = (reqBody) => {
  //   console.log(reqBody);

  let newData = new Towmast(reqBody);

  return newData.save().then((data, error) => {
    if (error) {
      console.log(error);
      return false;
    } else {
      console.log("data added successfully", data);
      return data;
    }
  });
};

module.exports.getAllData = (company) => {
  return Towmast.find()
    .populate({
      path: "towdrives",
      populate: {
        path: "driver",
        model: "Driver", // 'Driver' should match the name of the Driver model
      },
    })
    .populate({
      path: "towdrives",
      populate: {
        path: "dispinv2",
        model: "Towinv",
      },
    })
    .exec()
    .then((result) => {
      return result;
    });
};

module.exports.getOneData = async (reqParams) => {
  try {
    return Towmast.findById(reqParams.id)
      .populate({
        path: "towdrives",
        populate: {
          path: "driver",
          model: "Driver", // 'Driver' should match the name of the Driver model
        },
      })
      .populate({
        path: "towdrives",
        populate: {
          path: "dispinv2",
          model: "Towinv",
        },
      })
      .exec()
      .then((result) => {
        return result;
      });
  } catch (error) {
    return "failed to fetch";
  }
};

module.exports.updateDate = (reqParams, reqBody) => {
  const {
    dispnum,
    towdate,
    yearcar,
    makecar,
    modelcar,
    colorcar,
    calltype,
    datein,
    dateout,
    callactnum,
    refnumber,
    callname,
    licensest,
    licensenum,
    callphone,
    days,
    storagetyp,
    whocalled,
    perday,
    perdaytota,
    vin,
    type,
    tagmonthye,
    bodytype,
    towedfrom,
    towedto,
    retowto,
    cross_stre,
    retowtoda,
    deletecode,
    odometer,
    membernum,
    memnumexpd,
    lotsection,
    enterbywho,
    dispatcher,
    reason,
    itemgrou,
    liendout,
    liendin,
    lientyp,
    lientypems,
    lienfee,
    lien_overr,
    releaselic,
    condition,
    driveable,
    keysinf,
    holdnote,
    callremark,
    callremar2,
    aaacallnum,
    dispatched,
    priorit,
    zone,
    equipmen,
    creationda,
    etahours,
    etaminutes,
    etadatetim,
    regnametow,
    regname,
    regaddr1,
    regaddr2,
    regaddr3,
    regcity,
    regstat,
    regzip,
    lienvalue,
    liencvamt,
    datesold,
    computer_n,
    last_edit,
    whenappend,
    vstatus,
    udfchar1,
    udfchar2,
    driverwith,
    picture1,
    picture2,
    picture3,
    general1,
    general2,
    geoloca,
    geolocb,
    geodesta,
    geodestb,
    georetowa,
    georetowb,
    stocknum,
    printed462,
    is462car,
    bmw2002,
    editbywho,
    shift,
    releasetyp,
    officer,
    trsdatetim,
    drawer,
    relpass,
    transport,
    property,
    history,
    limoco,
    prnrellib,
    legname,
    legaddr1,
    legaddr2,
    legaddr3,
    legcity,
    legstate,
    legzip,
    prnlapdimp,
    date1523,
    auct_num,
    auct_date,
    ipaqfound,
    auction1,
    auction2,
    auction3,
    tozone,
    exportdt,
    soldamt,
    foxtow_id,
    webstatus1,
    webstatus2,
    aaaplus,
    aaaplusmil,
    latitude1,
    longitude1,
    latitude2,
    longitude2,
    vinresult,
    udfcnum1,
    udfcnum2,
    udfcchar1,
    udfcchar2,
    udfcdate1,
    udfcdate2,
    amnesty,
    pinkslip,
    recbooknum,
    amnesty_pa,
    datesent,
    sentstatus,
    batch,
    collect,
    mapcord,
    area,
    glposted,
    party1name,
    party1addr,
    party1add2,
    party1city,
    party1stat,
    party1zip,
    party2name,
    party2addr,
    party2add2,
    party2city,
    party2stat,
    party2zip,
    collect_fl,
    readytogo,
    ftiresize,
    rtiresize,
    wposition,
    locked,
    lacqnum,
  } = reqBody;

  let newData = new Towmast({
    dispnum,
    towdate,
    yearcar,
    makecar,
    modelcar,
    colorcar,
    calltype,
    datein,
    dateout,
    callactnum,
    refnumber,
    callname,
    licensest,
    licensenum,
    callphone,
    days,
    storagetyp,
    whocalled,
    perday,
    perdaytota,
    vin,
    type,
    tagmonthye,
    bodytype,
    towedfrom,
    towedto,
    retowto,
    cross_stre,
    retowtoda,
    deletecode,
    odometer,
    membernum,
    memnumexpd,
    lotsection,
    enterbywho,
    dispatcher,
    reason,
    itemgrou,
    liendout,
    liendin,
    lientyp,
    lientypems,
    lienfee,
    lien_overr,
    releaselic,
    condition,
    driveable,
    keysinf,
    holdnote,
    callremark,
    callremar2,
    aaacallnum,
    dispatched,
    priorit,
    zone,
    equipmen,
    creationda,
    etahours,
    etaminutes,
    etadatetim,
    regnametow,
    regname,
    regaddr1,
    regaddr2,
    regaddr3,
    regcity,
    regstat,
    regzip,
    lienvalue,
    liencvamt,
    datesold,
    computer_n,
    last_edit,
    whenappend,
    vstatus,
    udfchar1,
    udfchar2,
    driverwith,
    picture1,
    picture2,
    picture3,
    general1,
    general2,
    geoloca,
    geolocb,
    geodesta,
    geodestb,
    georetowa,
    georetowb,
    stocknum,
    printed462,
    is462car,
    bmw2002,
    editbywho,
    shift,
    releasetyp,
    officer,
    trsdatetim,
    drawer,
    relpass,
    transport,
    property,
    history,
    limoco,
    prnrellib,
    legname,
    legaddr1,
    legaddr2,
    legaddr3,
    legcity,
    legstate,
    legzip,
    prnlapdimp,
    date1523,
    auct_num,
    auct_date,
    ipaqfound,
    auction1,
    auction2,
    auction3,
    tozone,
    exportdt,
    soldamt,
    foxtow_id,
    webstatus1,
    webstatus2,
    aaaplus,
    aaaplusmil,
    latitude1,
    longitude1,
    latitude2,
    longitude2,
    vinresult,
    udfcnum1,
    udfcnum2,
    udfcchar1,
    udfcchar2,
    udfcdate1,
    udfcdate2,
    amnesty,
    pinkslip,
    recbooknum,
    amnesty_pa,
    datesent,
    sentstatus,
    batch,
    collect,
    mapcord,
    area,
    glposted,
    party1name,
    party1addr,
    party1add2,
    party1city,
    party1stat,
    party1zip,
    party2name,
    party2addr,
    party2add2,
    party2city,
    party2stat,
    party2zip,
    collect_fl,
    readytogo,
    ftiresize,
    rtiresize,
    wposition,
    locked,
    lacqnum,
  });

  return Towmast.findByIdAndUpdate(reqParams.id, newData).then(
    (update, error) => {
      if (error) {
        return false;
      } else {
        console.log("updated successfully", update);
        return true;
      }
    }
  );
};

module.exports.deleteData = (reqParams, reqBody) => {
  return Towmast.deleteOne({ _id: reqParams.id }).then((result) => {
    return result;
  });
};
